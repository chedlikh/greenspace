pipeline {
    agent any

    tools {
        maven 'M2_HOME'  // Specify the Maven tool version, make sure the name matches the tool configured in Jenkins
    }

    environment {
        // Environment variables for Nexus
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.33.10:8081" 
        NEXUS_REPOSITORY = "maven-releases"
        NEXUS_CREDENTIAL_ID = "NEXUS_CRED"
        ARTIFACT_VERSION = "${BUILD_NUMBER}"
 // Environment variables for Docker
        DOCKER_CREDENTIALS_ID = "docker-hub-creds"
        DOCKER_IMAGE = "chedli1/greenspace"
        DOCKER_TAG = "v1.0.0-${BUILD_NUMBER}"
        DOCKER_COMPOSE_FILE = "docker-compose.yml"  
        EMAIL_RECIPIENT = 'chdouuulaa@gmail.com'  
        EMAIL_SUBJECT = 'Jenkins Build Notification'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Check out the specified branch from the GitHub repository
                    git branch: 'main', url: 'https://github.com/chedlikh/greenspace.git'
                }
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    dir('app') {
                        // Run the Maven build command: clean, compile, and package
                        sh 'mvn clean compile package'
                        
                        // Optional: List the contents of the target directory for verification
                        sh 'ls -la target'
                    }
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                dir('app') {
                    withSonarQubeEnv('sq1') {
                        // Run SonarQube analysis
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage("Publish to Nexus") {
            steps {
                dir('app') {
                    script {
                        def pom = readMavenPom file: "pom.xml"
                        def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                        def artifactPath = filesByGlob[0]?.path  // Safe access with optional chaining
                        def artifactExists = fileExists(artifactPath)

                        if (artifactExists) {
                            echo "*** Publishing artifact: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${pom.version}"

                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: ARTIFACT_VERSION,
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging]
                                ]
                            )
                        } else {
                            error "*** File: ${artifactPath}, could not be found"
                        }
                    }
                }
            }
        }
        stage("Download Artifact from Nexus") {
           
            steps {
                dir('app') {
                script {
                    def artifactGroup = 'com.demo'
                    def artifactName = 'greenspace'
                    def artifactVersion = 'v2.0'
                    def artifactExtension = 'jar'

                    def nexusArtifactURL = "${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${artifactGroup.replace('.', '/')}/${artifactName}/${artifactVersion}/${artifactName}-${artifactVersion}.${artifactExtension}"

                    withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIAL_ID, passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                        sh "curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -o ${artifactName}.jar ${nexusArtifactURL}"  // Download the artifact
                    }
                }
            }
        }
       }
    }

    post {
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}

