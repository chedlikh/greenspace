pipeline {
    agent any

    tools {
        maven 'M2_HOME'
    }

    environment {
        // Nexus variables
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "127.0.0.1:8081" 
        NEXUS_REPOSITORY = "maven-releases"
        NEXUS_CREDENTIAL_ID = "NEXUS_CRED"
        ARTIFACT_VERSION = "${BUILD_NUMBER}"
        
        // Docker variables
        DOCKER_CREDENTIALS_ID = "docker-hub-creds"
        DOCKER_IMAGE = "chdoula1/greenspace"
        DOCKER_COMPOSE_FILE = "docker-compose.yml"
        DOCKER_TAG = "v1.0.0-${BUILD_NUMBER}"
        EMAIL_RECIPIENT = 'chdouuulaa@gmail.com'
        EMAIL_SUBJECT = 'Jenkins Build Notification'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    sh 'docker compose version'
                    sh 'docker ps'
                    git branch: 'main', url: 'https://github.com/chedlikh/greenspace.git'
                    sh 'echo "Hello, World!"'
                }
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    dir('app') {
                        sh 'mvn clean compile package'
                        sh 'ls -la target'
                    }
                }
            }
        }

        stage("Publish to Nexus") {
            steps {
                dir('app') {
                    script {
                        def pom = readMavenPom file: "pom.xml"
                        def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                        def artifactPath = filesByGlob[0]?.path
                        def artifactExists = fileExists(artifactPath)

                        if (artifactExists) {
                            echo "Publishing artifact: ${artifactPath}"
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: ARTIFACT_VERSION,
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging]
                                ]
                            )
                        } else {
                            error "Artifact not found at: ${artifactPath}"
                        }
                    }
                }
            }
        }

        stage("Download Artifact") {
            steps {
                dir('app') {
                    script {
                        def pom = readMavenPom file: "pom.xml"
                        def downloadPath = "${pom.groupId.replace('.', '/')}/${pom.artifactId}/${ARTIFACT_VERSION}"
                        def artifactFile = "${pom.artifactId}-${ARTIFACT_VERSION}.${pom.packaging}"
                        def nexusUrl = "${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${downloadPath}/${artifactFile}"

                        withCredentials([usernamePassword(
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            passwordVariable: 'NEXUS_PASSWORD',
                            usernameVariable: 'NEXUS_USERNAME'
                        )]) {
                            sh """
                                curl -u \$NEXUS_USERNAME:\$NEXUS_PASSWORD \
                                -o target/app.jar \
                                ${nexusUrl}
                            """
                        }
                    }
                }
            }
        }

        stage("Build Backend Image") {
            steps {
                dir('app') {
                    withCredentials([usernamePassword(
                        credentialsId: DOCKER_CREDENTIALS_ID,
                        passwordVariable: 'DOCKER_PASSWORD',
                        usernameVariable: 'DOCKER_USERNAME'
                    )]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('greenspace') {
                    sh 'npm ci'
                    sh 'npm run build'
                }
            }
        }

        stage("Build Frontend Image") {
            steps {
                dir('greenspace') {
                    withCredentials([usernamePassword(
                        credentialsId: DOCKER_CREDENTIALS_ID,
                        passwordVariable: 'DOCKER_PASSWORD',
                        usernameVariable: 'DOCKER_USERNAME'
                    )]) {
                        sh """
                            docker build -t ${DOCKER_IMAGE}-frontend:${DOCKER_TAG} -f Dockerfile.frontend .
                            docker push ${DOCKER_IMAGE}-frontend:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Cleanup Old Deployment') {
            steps {
                script {
                    // Stop and remove containers if they exist
                    sh "docker compose -f ${DOCKER_COMPOSE_FILE} down --rmi local --remove-orphans || true"
                    
                    // Clean up unused images
                    sh "docker image prune -af"
                    
                    // Remove dangling images
                    sh "docker rmi \$(docker images -f 'dangling=true' -q) || true"
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    dir('app') {
                        // Substitute environment variables in compose file
                        sh """
                            envsubst < ${DOCKER_COMPOSE_FILE} > docker-compose-processed.yml
                            docker compose -f docker-compose-processed.yml up -d --build --force-recreate
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
            // mail to: env.EMAIL_RECIPIENT, subject: env.EMAIL_SUBJECT, body: 'Build succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
            // mail to: env.EMAIL_RECIPIENT, subject: env.EMAIL_SUBJECT, body: 'Build failed!'
        }
    }
}
